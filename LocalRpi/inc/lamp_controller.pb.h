// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lamp_controller.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lamp_5fcontroller_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lamp_5fcontroller_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lamp_5fcontroller_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lamp_5fcontroller_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lamp_5fcontroller_2eproto;
namespace lamp_controller {
class LampData;
struct LampDataDefaultTypeInternal;
extern LampDataDefaultTypeInternal _LampData_default_instance_;
}  // namespace lamp_controller
PROTOBUF_NAMESPACE_OPEN
template<> ::lamp_controller::LampData* Arena::CreateMaybeMessage<::lamp_controller::LampData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lamp_controller {

// ===================================================================

class LampData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lamp_controller.LampData) */ {
 public:
  inline LampData() : LampData(nullptr) {}
  ~LampData() override;
  explicit PROTOBUF_CONSTEXPR LampData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LampData(const LampData& from);
  LampData(LampData&& from) noexcept
    : LampData() {
    *this = ::std::move(from);
  }

  inline LampData& operator=(const LampData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LampData& operator=(LampData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LampData& default_instance() {
    return *internal_default_instance();
  }
  static inline const LampData* internal_default_instance() {
    return reinterpret_cast<const LampData*>(
               &_LampData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LampData& a, LampData& b) {
    a.Swap(&b);
  }
  inline void Swap(LampData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LampData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LampData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LampData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LampData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LampData& from) {
    LampData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LampData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lamp_controller.LampData";
  }
  protected:
  explicit LampData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIlluminanceFieldNumber = 2,
    kVoltageFieldNumber = 3,
    kCurrentFieldNumber = 4,
    kPowerFieldNumber = 5,
    kEnergyFieldNumber = 6,
    kFrequencyFieldNumber = 7,
    kPowerFactorFieldNumber = 8,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // float illuminance = 2;
  void clear_illuminance();
  float illuminance() const;
  void set_illuminance(float value);
  private:
  float _internal_illuminance() const;
  void _internal_set_illuminance(float value);
  public:

  // float voltage = 3;
  void clear_voltage();
  float voltage() const;
  void set_voltage(float value);
  private:
  float _internal_voltage() const;
  void _internal_set_voltage(float value);
  public:

  // float current = 4;
  void clear_current();
  float current() const;
  void set_current(float value);
  private:
  float _internal_current() const;
  void _internal_set_current(float value);
  public:

  // float power = 5;
  void clear_power();
  float power() const;
  void set_power(float value);
  private:
  float _internal_power() const;
  void _internal_set_power(float value);
  public:

  // float energy = 6;
  void clear_energy();
  float energy() const;
  void set_energy(float value);
  private:
  float _internal_energy() const;
  void _internal_set_energy(float value);
  public:

  // float frequency = 7;
  void clear_frequency();
  float frequency() const;
  void set_frequency(float value);
  private:
  float _internal_frequency() const;
  void _internal_set_frequency(float value);
  public:

  // float power_factor = 8;
  void clear_power_factor();
  float power_factor() const;
  void set_power_factor(float value);
  private:
  float _internal_power_factor() const;
  void _internal_set_power_factor(float value);
  public:

  // @@protoc_insertion_point(class_scope:lamp_controller.LampData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    float illuminance_;
    float voltage_;
    float current_;
    float power_;
    float energy_;
    float frequency_;
    float power_factor_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lamp_5fcontroller_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LampData

// string name = 1;
inline void LampData::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& LampData::name() const {
  // @@protoc_insertion_point(field_get:lamp_controller.LampData.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LampData::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lamp_controller.LampData.name)
}
inline std::string* LampData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:lamp_controller.LampData.name)
  return _s;
}
inline const std::string& LampData::_internal_name() const {
  return _impl_.name_.Get();
}
inline void LampData::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* LampData::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* LampData::release_name() {
  // @@protoc_insertion_point(field_release:lamp_controller.LampData.name)
  return _impl_.name_.Release();
}
inline void LampData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lamp_controller.LampData.name)
}

// float illuminance = 2;
inline void LampData::clear_illuminance() {
  _impl_.illuminance_ = 0;
}
inline float LampData::_internal_illuminance() const {
  return _impl_.illuminance_;
}
inline float LampData::illuminance() const {
  // @@protoc_insertion_point(field_get:lamp_controller.LampData.illuminance)
  return _internal_illuminance();
}
inline void LampData::_internal_set_illuminance(float value) {
  
  _impl_.illuminance_ = value;
}
inline void LampData::set_illuminance(float value) {
  _internal_set_illuminance(value);
  // @@protoc_insertion_point(field_set:lamp_controller.LampData.illuminance)
}

// float voltage = 3;
inline void LampData::clear_voltage() {
  _impl_.voltage_ = 0;
}
inline float LampData::_internal_voltage() const {
  return _impl_.voltage_;
}
inline float LampData::voltage() const {
  // @@protoc_insertion_point(field_get:lamp_controller.LampData.voltage)
  return _internal_voltage();
}
inline void LampData::_internal_set_voltage(float value) {
  
  _impl_.voltage_ = value;
}
inline void LampData::set_voltage(float value) {
  _internal_set_voltage(value);
  // @@protoc_insertion_point(field_set:lamp_controller.LampData.voltage)
}

// float current = 4;
inline void LampData::clear_current() {
  _impl_.current_ = 0;
}
inline float LampData::_internal_current() const {
  return _impl_.current_;
}
inline float LampData::current() const {
  // @@protoc_insertion_point(field_get:lamp_controller.LampData.current)
  return _internal_current();
}
inline void LampData::_internal_set_current(float value) {
  
  _impl_.current_ = value;
}
inline void LampData::set_current(float value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:lamp_controller.LampData.current)
}

// float power = 5;
inline void LampData::clear_power() {
  _impl_.power_ = 0;
}
inline float LampData::_internal_power() const {
  return _impl_.power_;
}
inline float LampData::power() const {
  // @@protoc_insertion_point(field_get:lamp_controller.LampData.power)
  return _internal_power();
}
inline void LampData::_internal_set_power(float value) {
  
  _impl_.power_ = value;
}
inline void LampData::set_power(float value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:lamp_controller.LampData.power)
}

// float energy = 6;
inline void LampData::clear_energy() {
  _impl_.energy_ = 0;
}
inline float LampData::_internal_energy() const {
  return _impl_.energy_;
}
inline float LampData::energy() const {
  // @@protoc_insertion_point(field_get:lamp_controller.LampData.energy)
  return _internal_energy();
}
inline void LampData::_internal_set_energy(float value) {
  
  _impl_.energy_ = value;
}
inline void LampData::set_energy(float value) {
  _internal_set_energy(value);
  // @@protoc_insertion_point(field_set:lamp_controller.LampData.energy)
}

// float frequency = 7;
inline void LampData::clear_frequency() {
  _impl_.frequency_ = 0;
}
inline float LampData::_internal_frequency() const {
  return _impl_.frequency_;
}
inline float LampData::frequency() const {
  // @@protoc_insertion_point(field_get:lamp_controller.LampData.frequency)
  return _internal_frequency();
}
inline void LampData::_internal_set_frequency(float value) {
  
  _impl_.frequency_ = value;
}
inline void LampData::set_frequency(float value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:lamp_controller.LampData.frequency)
}

// float power_factor = 8;
inline void LampData::clear_power_factor() {
  _impl_.power_factor_ = 0;
}
inline float LampData::_internal_power_factor() const {
  return _impl_.power_factor_;
}
inline float LampData::power_factor() const {
  // @@protoc_insertion_point(field_get:lamp_controller.LampData.power_factor)
  return _internal_power_factor();
}
inline void LampData::_internal_set_power_factor(float value) {
  
  _impl_.power_factor_ = value;
}
inline void LampData::set_power_factor(float value) {
  _internal_set_power_factor(value);
  // @@protoc_insertion_point(field_set:lamp_controller.LampData.power_factor)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace lamp_controller

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lamp_5fcontroller_2eproto
